server:
  port: ${SERVER_PORT:8085}

spring:
  main:
    allow-bean-definition-overriding: ${SPRING_MAIN_ALLOW_BEAN_DEFINITION_OVERRIDING:true}

  application:
    name: ${SPRING_APPLICATION_NAME:course-instance-service}
  output:
    ansi:
      enabled: ALWAYS

eureka:
  client:
    register-with-eureka: ${EUREKA_CLIENT_REGISTER_WITH_EUREKA:true}
    fetch-registry: ${EUREKA_CLIENT_FETCH_REGISTRY:true}
    service-url:
      defaultZone: ${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE:http://localhost:8761/eureka/}
    registry-fetch-interval-seconds: ${EUREKA_CLIENT_REGISTRY_FETCH_INTERVAL_SECONDS:30}
  instance:
    hostname: ${EUREKA_INSTANCE_HOSTNAME:localhost}  # Add the hostname property here
    prefer-ip-address: ${EUREKA_INSTANCE_PREFER_IP_ADDRESS:true}


resilience4j:
  circuitbreaker:
    instances:
      myCircuitBreaker:
        registerHealthIndicator: ${RESILIENCE4J_CIRCUITBREAKER_MY_CIRCUITBREAKER_REGISTER_HEALTH_INDICATOR:true}
        failureRateThreshold: ${RESILIENCE4J_CIRCUITBREAKER_MY_CIRCUITBREAKER_FAILURE_RATE_THRESHOLD:20}
        minimumNumberOfCalls: ${RESILIENCE4J_CIRCUITBREAKER_MY_CIRCUITBREAKER_MINIMUM_NUMBER_OF_CALLS:5}
        slidingWindowSize: ${RESILIENCE4J_CIRCUITBREAKER_MY_CIRCUITBREAKER_SLIDING_WINDOW_SIZE:10}
        waitDurationInOpenState: ${RESILIENCE4J_CIRCUITBREAKER_MY_CIRCUITBREAKER_WAIT_DURATION_IN_OPEN_STATE:5s}
        permittedNumberOfCallsInHalfOpenState: ${RESILIENCE4J_CIRCUITBREAKER_MY_CIRCUITBREAKER_PERMITTED_NUMBER_OF_CALLS_IN_HALF_OPEN_STATE:3}
        automaticTransitionFromOpenToHalfOpenEnabled: ${RESILIENCE4J_CIRCUITBREAKER_MY_CIRCUITBREAKER_AUTOMATIC_TRANSITION_FROM_OPEN_TO_HALF_OPEN_ENABLED:true}
        slidingWindowType: ${RESILIENCE4J_CIRCUITBREAKER_MY_CIRCUITBREAKER_SLIDING_WINDOW_TYPE:COUNT_BASED}

  retry:
    instances:
      myRetry:
        registerHealthIndicator: ${RESILIENCE4J_RETRY_MY_RETRY_REGISTER_HEALTH_INDICATOR:true}
        retryCount: ${RESILIENCE4J_RETRY_MY_RETRY_RETRY_COUNT:3}
        waitDuration: ${RESILIENCE4J_RETRY_MY_RETRY_WAIT_DURATION:2s}




security:
  authorization:
    paths:
      - path: ${SECURITY_AUTHORIZATION_CREATE_INSTANCE_PATH:/api/instances/create}
        method: ${SECURITY_AUTHORIZATION_CREATE_INSTANCE_METHOD:POST}
        roles: ${SECURITY_AUTHORIZATION_CREATE_INSTANCE_ROLES:ADMINISTRATOR}

      - path: ${SECURITY_AUTHORIZATION_FULL_UPDATE_USER_PATH:/api/instances/**}
        method: ${SECURITY_AUTHORIZATION_FULL_UPDATE_USER_METHOD:DELETE}
        roles: ${SECURITY_AUTHORIZATION_FULL_UPDATE_USER_ROLES:ADMINISTRATOR}





